--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="UNSIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=4 WIDTH=12 WIDTHR=14 data result
--VERSION_BEGIN 19.1 cbx_cycloneii 2019:09:22:11:00:28:SJ cbx_lpm_add_sub 2019:09:22:11:00:28:SJ cbx_mgl 2019:09:22:11:02:15:SJ cbx_nadder 2019:09:22:11:00:28:SJ cbx_padd 2019:09:22:11:00:28:SJ cbx_parallel_add 2019:09:22:11:00:28:SJ cbx_stratix 2019:09:22:11:00:28:SJ cbx_stratixii 2019:09:22:11:00:28:SJ cbx_util_mgl 2019:09:22:11:00:28:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 54 
SUBDESIGN par_add_tne
( 
	data[47..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE
	add1_result[12..0]	:	WIRE;
	add6_result[13..0]	:	WIRE;
	sft10a[13..0] : soft;
	sft2a[12..0] : soft;
	sft3a[12..0] : soft;
	sft4a[12..0] : soft;
	sft5a[12..0] : soft;
	sft7a[13..0] : soft;
	sft8a[13..0] : soft;
	sft9a[13..0] : soft;
	w187w[13..0]	: WIRE;
	w80w	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out + sft4a[].out;
	add6_result[] = sft7a[].out + sft8a[].out + sft9a[].out;
	sft10a[].in = add6_result[];
	sft2a[].in = ( w80w, ( data[47..47], ( data[46..46], ( data[45..45], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..36]))))))))))));
	sft3a[].in = ( w80w, ( data[35..35], ( data[34..34], ( data[33..33], ( data[32..32], ( data[31..31], ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..24]))))))))))));
	sft4a[].in = ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, ( w80w, w80w))))))))))));
	sft5a[].in = add1_result[];
	sft7a[].in = ( w80w, ( sft5a[12..12].out, ( data[11..11], ( data[10..10], ( data[9..9], ( data[8..8], ( data[7..7], ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..2], ( data[1..0])))))))))))));
	sft8a[].in = ( w80w, ( w80w, ( data[23..23], ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..17], ( data[16..16], ( data[15..15], ( data[14..14], ( data[13..12])))))))))))));
	sft9a[].in = ( w80w, ( w80w, ( sft5a[11..11].out, ( sft5a[10..10].out, ( sft5a[9..9].out, ( sft5a[8..8].out, ( sft5a[7..7].out, ( sft5a[6..6].out, ( sft5a[5..5].out, ( sft5a[4..4].out, ( sft5a[3..3].out, ( sft5a[2..2].out, ( sft5a[1..1].out, sft5a[0..0].out)))))))))))));
	result[13..0] = w187w[13..0];
	w187w[] = ( sft10a[13..13].out, sft10a[12..12].out, sft10a[11..11].out, sft10a[10..10].out, sft10a[9..9].out, sft10a[8..8].out, sft10a[7..7].out, sft10a[6..6].out, sft10a[5..5].out, sft10a[4..4].out, sft10a[3..3].out, sft10a[2..2].out, sft10a[1..1].out, sft10a[0..0].out);
	w80w = B"0";
END;
--VALID FILE
